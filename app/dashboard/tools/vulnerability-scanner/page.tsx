"use client";

import { useState } from "react";
import { Search, AlertTriangle, CheckCircle, Info, RefreshCw, Globe, Shield, Lock } from "lucide-react";
import { motion } from "framer-motion";
import { Button } from "@/app/components/ui/button";
import { Input } from "@/app/components/ui/input";

interface Vulnerability {
  id: string;
  name: string;
  description: string;
  severity: "critical" | "high" | "medium" | "low";
  category: string;
  cvss_score: number;
  affected_component: string;
  recommendation: string;
  references: string[];
}

interface ScanResult {
  target_url: string;
  scan_time: string;
  vulnerabilities: Vulnerability[];
  summary: {
    total: number;
    critical: number;
    high: number;
    medium: number;
    low: number;
  };
  scan_details: {
    duration: string;
    endpoints_tested: number;
    requests_made: number;
  };
}

export default function VulnerabilityScanner() {
  const [url, setUrl] = useState("");
  const [scanning, setScanning] = useState(false);
  const [result, setResult] = useState<ScanResult | null>(null);
  const [error, setError] = useState("");

  const startScan = async () => {
    if (!url) {
      setError("Please enter a URL to scan");
      return;
    }

    try {
      setError("");
      setResult(null);
      setScanning(true);

      // Simulate API call delay
      await new Promise((resolve) => setTimeout(resolve, 3000));

      // Generate mock scan results
      const mockResult = generateMockResults(url);
      setResult(mockResult);
    } catch (err) {
      setError("An error occurred during the scan. Please try again.");
    } finally {
      setScanning(false);
    }
  };

  const generateMockResults = (targetUrl: string): ScanResult => {
    const vulnerabilities: Vulnerability[] = [];
    
    // SQL Injection
    if (Math.random() > 0.7) {
      vulnerabilities.push({
        id: "SQL-INJ-001",
        name: "SQL Injection Vulnerability",
        description: "Application is vulnerable to SQL injection attacks through unvalidated user input",
        severity: "critical",
        category: "Injection",
        cvss_score: 9.8,
        affected_component: "/api/users",
        recommendation: "Implement prepared statements and input validation",
        references: ["https://owasp.org/www-community/attacks/SQL_Injection"]
      });
    }

    // XSS
    if (Math.random() > 0.6) {
      vulnerabilities.push({
        id: "XSS-001",
        name: "Cross-Site Scripting (XSS)",
        description: "Reflected XSS vulnerability in search functionality",
        severity: "high",
        category: "Cross-Site Scripting",
        cvss_score: 8.2,
        affected_component: "/search",
        recommendation: "Implement proper output encoding and CSP headers",
        references: ["https://owasp.org/www-community/attacks/xss/"]
      });
    }

    // CSRF
    if (Math.random() > 0.5) {
      vulnerabilities.push({
        id: "CSRF-001",
        name: "Cross-Site Request Forgery",
        description: "Missing CSRF tokens in form submissions",
        severity: "medium",
        category: "Session Management",
        cvss_score: 6.5,
        affected_component: "/user/profile",
        recommendation: "Implement CSRF tokens and validate origin",
        references: ["https://owasp.org/www-community/attacks/csrf"]
      });
    }

    // Outdated Dependencies
    if (Math.random() > 0.4) {
      vulnerabilities.push({
        id: "DEP-001",
        name: "Outdated Dependencies",
        description: "Multiple third-party libraries with known vulnerabilities",
        severity: "medium",
        category: "Dependencies",
        cvss_score: 5.5,
        affected_component: "package.json",
        recommendation: "Update dependencies to latest secure versions",
        references: ["https://owasp.org/www-project-dependency-check/"]
      });
    }

    // Insecure Headers
    if (Math.random() > 0.3) {
      vulnerabilities.push({
        id: "SEC-HEADERS-001",
        name: "Missing Security Headers",
        description: "Application is missing important security headers",
        severity: "low",
        category: "Security Headers",
        cvss_score: 3.7,
        affected_component: "HTTP Headers",
        recommendation: "Implement recommended security headers",
        references: ["https://owasp.org/www-project-secure-headers/"]
      });
    }

    const summary = {
      total: vulnerabilities.length,
      critical: vulnerabilities.filter(v => v.severity === "critical").length,
      high: vulnerabilities.filter(v => v.severity === "high").length,
      medium: vulnerabilities.filter(v => v.severity === "medium").length,
      low: vulnerabilities.filter(v => v.severity === "low").length
    };

    return {
      target_url: targetUrl,
      scan_time: new Date().toISOString(),
      vulnerabilities,
      summary,
      scan_details: {
        duration: "2m 34s",
        endpoints_tested: Math.floor(Math.random() * 50) + 20,
        requests_made: Math.floor(Math.random() * 500) + 200
      }
    };
  };

  const getSeverityColor = (severity: "critical" | "high" | "medium" | "low") => {
    switch (severity) {
      case "critical":
        return "text-purple-600 bg-purple-100 dark:bg-purple-900/20";
      case "high":
        return "text-red-500 bg-red-100 dark:bg-red-900/20";
      case "medium":
        return "text-orange-500 bg-orange-100 dark:bg-orange-900/20";
      case "low":
        return "text-yellow-500 bg-yellow-100 dark:bg-yellow-900/20";
      default:
        return "text-gray-500 bg-gray-100 dark:bg-gray-900/20";
    }
  };

  const getCVSSColor = (score: number) => {
    if (score >= 9.0) return "text-purple-600";
    if (score >= 7.0) return "text-red-500";
    if (score >= 4.0) return "text-orange-500";
    return "text-yellow-500";
  };

  return (
    <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-8">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="bg-gradient-to-r from-blue-500 to-blue-600 dark:from-blue-600 dark:to-blue-700 rounded-lg shadow-md p-6 text-white mb-8"
      >
        <h1 className="text-2xl font-bold flex items-center">
          <Search className="mr-2 h-6 w-6" />
          Vulnerability Scanner
        </h1>
        <p className="mt-2">
          Scan web applications for security vulnerabilities and weaknesses
        </p>
      </motion.div>

      {/* Scan Configuration */}
      <div className="bg-white dark:bg-black shadow-md rounded-lg border border-gray-200 dark:border-blue-900/20 overflow-hidden mb-8">
        <div className="p-6">
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-blue-400 mb-2">
                Target URL
              </label>
              <Input
                type="url"
                placeholder="https://example.com"
                value={url}
                onChange={(e) => setUrl(e.target.value)}
                className="bg-gray-50 dark:bg-gray-900"
              />
            </div>

            {error && (
              <p className="text-sm text-red-600 dark:text-red-400">{error}</p>
            )}

            <Button
              onClick={startScan}
              disabled={scanning}
              className="w-full bg-blue-600 hover:bg-blue-700 dark:bg-blue-600 dark:hover:bg-blue-700 text-white"
            >
              {scanning ? (
                <>
                  <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                  Scanning...
                </>
              ) : (
                <>
                  <Search className="mr-2 h-4 w-4" />
                  Start Scan
                </>
              )}
            </Button>
          </div>
        </div>
      </div>

      {/* Scan Results */}
      {result && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.5 }}
          className="space-y-6"
        >
          {/* Summary */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6">
            <div className="bg-white dark:bg-black shadow-md rounded-lg border border-gray-200 dark:border-blue-900/20 overflow-hidden">
              <div className="p-6">
                <h3 className="text-sm font-medium text-gray-500 dark:text-blue-400/70 uppercase">
                  Total Issues
                </h3>
                <div className="mt-2 flex items-baseline">
                  <div className="text-3xl font-semibold text-gray-900 dark:text-blue-400">
                    {result.summary.total}
                  </div>
                </div>
              </div>
            </div>

            <div className="bg-white dark:bg-black shadow-md rounded-lg border border-gray-200 dark:border-blue-900/20 overflow-hidden">
              <div className="p-6">
                <h3 className="text-sm font-medium text-gray-500 dark:text-blue-400/70 uppercase">
                  Critical
                </h3>
                <div className="mt-2 flex items-baseline">
                  <div className="text-3xl font-semibold text-purple-600 dark:text-purple-400">
                    {result.summary.critical}
                  </div>
                </div>
              </div>
            </div>

            <div className="bg-white dark:bg-black shadow-md rounded-lg border border-gray-200 dark:border-blue-900/20 overflow-hidden">
              <div className="p-6">
                <h3 className="text-sm font-medium text-gray-500 dark:text-blue-400/70 uppercase">
                  High
                </h3>
                <div className="mt-2 flex items-baseline">
                  <div className="text-3xl font-semibold text-red-600 dark:text-red-400">
                    {result.summary.high}
                  </div>
                </div>
              </div>
            </div>

            <div className="bg-white dark:bg-black shadow-md rounded-lg border border-gray-200 dark:border-blue-900/20 overflow-hidden">
              <div className="p-6">
                <h3 className="text-sm font-medium text-gray-500 dark:text-blue-400/70 uppercase">
                  Medium
                </h3>
                <div className="mt-2 flex items-baseline">
                  <div className="text-3xl font-semibold text-orange-600 dark:text-orange-400">
                    {result.summary.medium}
                  </div>
                </div>
              </div>
            </div>

            <div className="bg-white dark:bg-black shadow-md rounded-lg border border-gray-200 dark:border-blue-900/20 overflow-hidden">
              <div className="p-6">
                <h3 className="text-sm font-medium text-gray-500 dark:text-blue-400/70 uppercase">
                  Low
                </h3>
                <div className="mt-2 flex items-baseline">
                  <div className="text-3xl font-semibold text-yellow-600 dark:text-yellow-400">
                    {result.summary.low}
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Scan Details */}
          <div className="bg-white dark:bg-black shadow-md rounded-lg border border-gray-200 dark:border-blue-900/20 overflow-hidden">
            <div className="p-6">
              <h2 className="text-lg font-semibold text-gray-900 dark:text-blue-400 mb-4">
                Scan Details
              </h2>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div>
                  <span className="text-sm text-gray-500 dark:text-blue-400/70">Target:</span>
                  <div className="font-medium text-gray-900 dark:text-blue-400">
                    {result.target_url}
                  </div>
                </div>
                <div>
                  <span className="text-sm text-gray-500 dark:text-blue-400/70">Duration:</span>
                  <div className="font-medium text-gray-900 dark:text-blue-400">
                    {result.scan_details.duration}
                  </div>
                </div>
                <div>
                  <span className="text-sm text-gray-500 dark:text-blue-400/70">Endpoints Tested:</span>
                  <div className="font-medium text-gray-900 dark:text-blue-400">
                    {result.scan_details.endpoints_tested}
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Vulnerabilities */}
          <div className="bg-white dark:bg-black shadow-md rounded-lg border border-gray-200 dark:border-blue-900/20 overflow-hidden">
            <div className="p-6">
              <h2 className="text-xl font-semibold text-gray-900 dark:text-blue-400 mb-6">
                Detected Vulnerabilities
              </h2>

              <div className="space-y-6">
                {result.vulnerabilities.map((vuln, index) => (
                  <div
                    key={index}
                    className="border border-gray-200 dark:border-blue-900/20 rounded-lg overflow-hidden"
                  >
                    <div className="p-4">
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center space-x-3">
                          <span className={`px-2 py-1 rounded text-xs font-medium ${getSeverityColor(vuln.severity)}`}>
                            {vuln.severity}
                          </span>
                          <h3 className="font-medium text-gray-900 dark:text-blue-400">
                            {vuln.name}
                          </h3>
                        </div>
                        <span className={`font-mono text-sm ${getCVSSColor(vuln.cvss_score)}`}>
                          CVSS: {vuln.cvss_score}
                        </span>
                      </div>

                      <div className="mt-4 space-y-4">
                        <div>
                          <h4 className="text-sm font-medium text-gray-700 dark:text-blue-400">Description</h4>
                          <p className="mt-1 text-sm text-gray-600 dark:text-blue-400/70">
                            {vuln.description}
                          </p>
                        </div>

                        <div>
                          <h4 className="text-sm font-medium text-gray-700 dark:text-blue-400">Affected Component</h4>
                          <p className="mt-1 text-sm font-mono text-gray-600 dark:text-blue-400/70">
                            {vuln.affected_component}
                          </p>
                        </div>

                        <div>
                          <h4 className="text-sm font-medium text-gray-700 dark:text-blue-400">Recommendation</h4>
                          <p className="mt-1 text-sm text-gray-600 dark:text-blue-400/70">
                            {vuln.recommendation}
                          </p>
                        </div>

                        <div>
                          <h4 className="text-sm font-medium text-gray-700 dark:text-blue-400">References</h4>
                          <ul className="mt-1 space-y-1">
                            {vuln.references.map((ref, refIndex) => (
                              <li key={refIndex}>
                                <a
                                  href={ref}
                                  target="_blank"
                                  rel="noopener noreferrer"
                                  className="text-sm text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300"
                                >
                                  {ref}
                                </a>
                              </li>
                            ))}
                          </ul>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </motion.div>
      )}
    </div>
  );
} 