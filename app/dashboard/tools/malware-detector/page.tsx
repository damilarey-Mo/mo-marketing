"use client";

import { useState } from "react";
import { FileWarning, AlertTriangle, CheckCircle, Info, Upload, Loader2, FileCheck, Shield } from "lucide-react";
import { motion } from "framer-motion";
import { Button } from "@/app/components/ui/button";

interface MalwareSignature {
  name: string;
  type: string;
  severity: "critical" | "high" | "medium" | "low";
  description: string;
  recommendation: string;
}

interface ScanResult {
  fileName: string;
  fileSize: string;
  fileType: string;
  scanTime: string;
  isInfected: boolean;
  detectedThreats: MalwareSignature[];
  riskScore: number;
  fileHash: string;
  scanDetails: {
    signatures_checked: number;
    scan_duration: string;
    engine_version: string;
  };
}

export default function MalwareDetector() {
  const [file, setFile] = useState<File | null>(null);
  const [scanning, setScanning] = useState(false);
  const [result, setResult] = useState<ScanResult | null>(null);
  const [error, setError] = useState("");

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFile = event.target.files?.[0];
    if (selectedFile) {
      setFile(selectedFile);
      setResult(null);
      setError("");
    }
  };

  const startScan = async () => {
    if (!file) {
      setError("Please select a file to scan");
      return;
    }

    try {
      setError("");
      setResult(null);
      setScanning(true);

      // Simulate API call delay
      await new Promise((resolve) => setTimeout(resolve, 3000));

      // Generate mock scan results
      const mockResult = generateMockResults(file);
      setResult(mockResult);
    } catch (err) {
      setError("An error occurred during the scan. Please try again.");
    } finally {
      setScanning(false);
    }
  };

  const generateMockResults = (file: File): ScanResult => {
    const threats: MalwareSignature[] = [];
    let riskScore = 100;

    // Randomly decide if file is infected
    const isInfected = Math.random() > 0.7;

    if (isInfected) {
      // Generate random threats
      const possibleThreats = [
        {
          name: "Trojan.Generic",
          type: "Trojan",
          severity: "critical" as const,
          description: "Generic trojan malware detected in file structure",
          recommendation: "Immediately quarantine the file and run a full system scan"
        },
        {
          name: "Ransomware.Cryptolocker",
          type: "Ransomware",
          severity: "critical" as const,
          description: "File contains ransomware signatures matching Cryptolocker family",
          recommendation: "Isolate the system and engage incident response team"
        },
        {
          name: "Backdoor.Remote",
          type: "Backdoor",
          severity: "high" as const,
          description: "Remote access backdoor detected in executable code",
          recommendation: "Remove file and investigate system compromise"
        },
        {
          name: "Spyware.Keylogger",
          type: "Spyware",
          severity: "high" as const,
          description: "Keylogging functionality detected in file",
          recommendation: "Remove file and scan for additional spyware components"
        },
        {
          name: "PUA.Adware",
          type: "Potentially Unwanted Application",
          severity: "medium" as const,
          description: "File contains adware components",
          recommendation: "Consider removing file if not intentionally installed"
        }
      ];

      // Add 1-3 random threats
      const numThreats = Math.floor(Math.random() * 3) + 1;
      for (let i = 0; i < numThreats; i++) {
        const threat = possibleThreats[Math.floor(Math.random() * possibleThreats.length)];
        if (!threats.find(t => t.name === threat.name)) {
          threats.push(threat);
          // Reduce risk score based on severity
          if (threat.severity === "critical") riskScore -= 40;
          else if (threat.severity === "high") riskScore -= 25;
          else if (threat.severity === "medium") riskScore -= 15;
        }
      }
    }

    // Ensure risk score doesn't go below 0
    riskScore = Math.max(0, riskScore);

    return {
      fileName: file.name,
      fileSize: formatFileSize(file.size),
      fileType: file.type || "Unknown",
      scanTime: new Date().toISOString(),
      isInfected,
      detectedThreats: threats,
      riskScore,
      fileHash: generateMockHash(),
      scanDetails: {
        signatures_checked: 1000000 + Math.floor(Math.random() * 500000),
        scan_duration: `${(Math.random() * 2 + 0.5).toFixed(1)} seconds`,
        engine_version: "3.5.0"
      }
    };
  };

  const formatFileSize = (bytes: number): string => {
    if (bytes === 0) return "0 Bytes";
    const k = 1024;
    const sizes = ["Bytes", "KB", "MB", "GB"];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
  };

  const generateMockHash = (): string => {
    const chars = "0123456789abcdef";
    let hash = "";
    for (let i = 0; i < 64; i++) {
      hash += chars[Math.floor(Math.random() * chars.length)];
    }
    return hash;
  };

  const getSeverityColor = (severity: "critical" | "high" | "medium" | "low") => {
    switch (severity) {
      case "critical":
        return "text-purple-600 bg-purple-100 dark:bg-purple-900/20";
      case "high":
        return "text-red-500 bg-red-100 dark:bg-red-900/20";
      case "medium":
        return "text-orange-500 bg-orange-100 dark:bg-orange-900/20";
      case "low":
        return "text-yellow-500 bg-yellow-100 dark:bg-yellow-900/20";
      default:
        return "text-gray-500 bg-gray-100 dark:bg-gray-900/20";
    }
  };

  const getRiskScoreColor = (score: number) => {
    if (score >= 90) return "text-green-500";
    if (score >= 70) return "text-yellow-500";
    if (score >= 40) return "text-orange-500";
    return "text-red-500";
  };

  return (
    <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-8">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="bg-gradient-to-r from-red-500 to-red-600 dark:from-red-600 dark:to-red-700 rounded-lg shadow-md p-6 text-white mb-8"
      >
        <h1 className="text-2xl font-bold flex items-center">
          <FileWarning className="mr-2 h-6 w-6" />
          Malware Detector
        </h1>
        <p className="mt-2">
          Scan files for malware, viruses, and other malicious content
        </p>
      </motion.div>

      {/* File Upload */}
      <div className="bg-white dark:bg-black shadow-md rounded-lg border border-gray-200 dark:border-red-900/20 overflow-hidden mb-8">
        <div className="p-6">
          <div className="space-y-4">
            <div className="flex items-center justify-center w-full">
              <label
                htmlFor="file-upload"
                className="flex flex-col items-center justify-center w-full h-64 border-2 border-dashed rounded-lg cursor-pointer bg-gray-50 dark:bg-gray-900 border-gray-300 dark:border-red-900/20 hover:bg-gray-100 dark:hover:bg-gray-800"
              >
                <div className="flex flex-col items-center justify-center pt-5 pb-6">
                  <Upload className="w-8 h-8 mb-4 text-gray-500 dark:text-red-400" />
                  <p className="mb-2 text-sm text-gray-500 dark:text-red-400">
                    <span className="font-semibold">Click to upload</span> or drag and drop
                  </p>
                  <p className="text-xs text-gray-500 dark:text-red-400/70">
                    Any file type supported
                  </p>
                </div>
                <input
                  id="file-upload"
                  type="file"
                  className="hidden"
                  onChange={handleFileChange}
                />
              </label>
            </div>

            {file && (
              <div className="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-900 rounded-lg">
                <div className="flex items-center">
                  <FileCheck className="h-5 w-5 text-green-500 mr-2" />
                  <span className="text-sm text-gray-900 dark:text-red-400">
                    {file.name}
                  </span>
                </div>
                <span className="text-sm text-gray-500 dark:text-red-400/70">
                  {formatFileSize(file.size)}
                </span>
              </div>
            )}

            {error && (
              <p className="text-sm text-red-600 dark:text-red-400">{error}</p>
            )}

            <Button
              onClick={startScan}
              disabled={scanning || !file}
              className="w-full bg-red-600 hover:bg-red-700 dark:bg-red-600 dark:hover:bg-red-700 text-white"
            >
              {scanning ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Scanning...
                </>
              ) : (
                <>
                  <Shield className="mr-2 h-4 w-4" />
                  Start Scan
                </>
              )}
            </Button>
          </div>
        </div>
      </div>

      {/* Scan Results */}
      {result && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.5 }}
          className="space-y-6"
        >
          {/* Summary */}
          <div className="bg-white dark:bg-black shadow-md rounded-lg border border-gray-200 dark:border-red-900/20 overflow-hidden">
            <div className="p-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <h2 className="text-lg font-semibold text-gray-900 dark:text-red-400 mb-4">
                    Scan Results
                  </h2>
                  <div className="space-y-3">
                    <div>
                      <span className="text-sm text-gray-500 dark:text-red-400/70">File Name:</span>
                      <div className="font-medium text-gray-900 dark:text-red-400">
                        {result.fileName}
                      </div>
                    </div>
                    <div>
                      <span className="text-sm text-gray-500 dark:text-red-400/70">File Type:</span>
                      <div className="font-medium text-gray-900 dark:text-red-400">
                        {result.fileType}
                      </div>
                    </div>
                    <div>
                      <span className="text-sm text-gray-500 dark:text-red-400/70">File Size:</span>
                      <div className="font-medium text-gray-900 dark:text-red-400">
                        {result.fileSize}
                      </div>
                    </div>
                    <div>
                      <span className="text-sm text-gray-500 dark:text-red-400/70">SHA-256:</span>
                      <div className="font-mono text-sm text-gray-900 dark:text-red-400 break-all">
                        {result.fileHash}
                      </div>
                    </div>
                  </div>
                </div>

                <div className="flex flex-col items-center justify-center p-6 bg-gray-50 dark:bg-gray-900/50 rounded-lg">
                  <div className={`text-4xl font-bold mb-2 ${getRiskScoreColor(result.riskScore)}`}>
                    {result.riskScore}
                  </div>
                  <div className="text-sm text-gray-500 dark:text-red-400/70 mb-4">
                    Safety Score
                  </div>
                  {result.isInfected ? (
                    <div className="flex items-center text-red-600 dark:text-red-400">
                      <AlertTriangle className="h-5 w-5 mr-2" />
                      Threats Detected
                    </div>
                  ) : (
                    <div className="flex items-center text-green-600 dark:text-green-400">
                      <CheckCircle className="h-5 w-5 mr-2" />
                      File is Safe
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>

          {/* Scan Details */}
          <div className="bg-white dark:bg-black shadow-md rounded-lg border border-gray-200 dark:border-red-900/20 overflow-hidden">
            <div className="p-6">
              <h2 className="text-lg font-semibold text-gray-900 dark:text-red-400 mb-4">
                Scan Details
              </h2>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div>
                  <span className="text-sm text-gray-500 dark:text-red-400/70">Signatures Checked:</span>
                  <div className="font-medium text-gray-900 dark:text-red-400">
                    {result.scanDetails.signatures_checked.toLocaleString()}
                  </div>
                </div>
                <div>
                  <span className="text-sm text-gray-500 dark:text-red-400/70">Scan Duration:</span>
                  <div className="font-medium text-gray-900 dark:text-red-400">
                    {result.scanDetails.scan_duration}
                  </div>
                </div>
                <div>
                  <span className="text-sm text-gray-500 dark:text-red-400/70">Engine Version:</span>
                  <div className="font-medium text-gray-900 dark:text-red-400">
                    {result.scanDetails.engine_version}
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Detected Threats */}
          {result.detectedThreats.length > 0 && (
            <div className="bg-white dark:bg-black shadow-md rounded-lg border border-gray-200 dark:border-red-900/20 overflow-hidden">
              <div className="p-6">
                <h2 className="text-xl font-semibold text-gray-900 dark:text-red-400 mb-6 flex items-center">
                  <AlertTriangle className="h-5 w-5 text-red-500 dark:text-red-400 mr-2" />
                  Detected Threats
                </h2>

                <div className="space-y-6">
                  {result.detectedThreats.map((threat, index) => (
                    <div
                      key={index}
                      className="border border-gray-200 dark:border-red-900/20 rounded-lg overflow-hidden"
                    >
                      <div className="p-4">
                        <div className="flex items-center justify-between mb-4">
                          <div className="flex items-center space-x-3">
                            <span className={`px-2 py-1 rounded text-xs font-medium ${getSeverityColor(threat.severity)}`}>
                              {threat.severity}
                            </span>
                            <h3 className="font-medium text-gray-900 dark:text-red-400">
                              {threat.name}
                            </h3>
                          </div>
                          <span className="text-sm text-gray-500 dark:text-red-400/70">
                            {threat.type}
                          </span>
                        </div>

                        <div className="space-y-4">
                          <div>
                            <h4 className="text-sm font-medium text-gray-700 dark:text-red-400">Description</h4>
                            <p className="mt-1 text-sm text-gray-600 dark:text-red-400/70">
                              {threat.description}
                            </p>
                          </div>

                          <div>
                            <h4 className="text-sm font-medium text-gray-700 dark:text-red-400">Recommendation</h4>
                            <p className="mt-1 text-sm text-gray-600 dark:text-red-400/70">
                              {threat.recommendation}
                            </p>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}
        </motion.div>
      )}
    </div>
  );
} 