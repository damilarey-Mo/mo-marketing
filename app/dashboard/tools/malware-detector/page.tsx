"use client";

import { useState, useRef, useCallback } from "react";
import { FileWarning, Upload, File, CheckCircle, AlertTriangle, FileType, Save, Download, Trash2, FileText, Film, Music, Image, Archive, Shield } from "lucide-react";
import { motion } from "framer-motion";
import { Button } from "@/app/components/ui/button";

interface FileAnalysisResult {
  fileName: string;
  fileSize: string;
  fileType: string;
  threats: {
    found: boolean;
    type?: string;
    severity?: "critical" | "high" | "medium" | "low";
    details?: string;
    indicators?: string[];
  };
  analysisTime: string;
  md5Hash: string;
  sha256Hash: string;
  timestamp: string;
}

export default function MalwareDetector() {
  const [file, setFile] = useState<File | null>(null);
  const [isDragging, setIsDragging] = useState(false);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisProgress, setAnalysisProgress] = useState(0);
  const [result, setResult] = useState<FileAnalysisResult | null>(null);
  const [error, setError] = useState("");
  
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileSelect = (selectedFile: File) => {
    // Reset states
    setError("");
    setResult(null);
    
    // Check file size - limit to 50MB for mock
    if (selectedFile.size > 50 * 1024 * 1024) {
      setError("File size exceeds 50MB limit");
      return;
    }
    
    setFile(selectedFile);
  };

  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      handleFileSelect(e.target.files[0]);
    }
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);
    
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      handleFileSelect(e.dataTransfer.files[0]);
    }
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = () => {
    setIsDragging(false);
  };

  const triggerFileInput = () => {
    fileInputRef.current?.click();
  };

  const startAnalysis = async () => {
    if (!file) return;
    
    try {
      // Reset previous results
      setResult(null);
      
      // Start analysis
      setIsAnalyzing(true);
      setAnalysisProgress(0);

      // Simulate analysis progress
      const interval = setInterval(() => {
        setAnalysisProgress((prev) => {
          // Make progress more realistic with slower movement towards end
          const increment = (100 - prev) * 0.05 + Math.random() * 5;
          const newProgress = prev + increment;
          return newProgress >= 100 ? 100 : newProgress;
        });
      }, 300);

      // Simulate API call delay - longer for larger files
      const delay = Math.min(1000 + file.size / 50000, 5000);
      await new Promise((resolve) => setTimeout(resolve, delay));

      // Generate mock analysis result
      clearInterval(interval);
      setAnalysisProgress(100);
      
      const mockResult = generateMockAnalysisResult(file);
      setResult(mockResult);
      setIsAnalyzing(false);
    } catch (err) {
      setError("An error occurred during file analysis. Please try again.");
      setIsAnalyzing(false);
    }
  };

  const generateMockAnalysisResult = (file: File): FileAnalysisResult => {
    // Helper functions for generating realistic mock data
    const generateRandomHash = (length: number) => {
      const characters = "abcdef0123456789";
      let result = "";
      for (let i = 0; i < length; i++) {
        result += characters.charAt(Math.floor(Math.random() * characters.length));
      }
      return result;
    };
    
    const formatFileSize = (bytes: number): string => {
      if (bytes < 1024) return bytes + " bytes";
      else if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(2) + " KB";
      else if (bytes < 1024 * 1024 * 1024) return (bytes / (1024 * 1024)).toFixed(2) + " MB";
      else return (bytes / (1024 * 1024 * 1024)).toFixed(2) + " GB";
    };
    
    const hasSuspiciousName = (): boolean => {
      const lowercaseName = file.name.toLowerCase();
      return lowercaseName.includes("crack") || 
             lowercaseName.includes("keygen") || 
             lowercaseName.includes("patch") ||
             lowercaseName.includes("hack");
    };
    
    const getFileType = (): string => {
      const extension = file.name.split('.').pop()?.toLowerCase() || "";
      
      // Determine file type based on extension
      if (["jpg", "jpeg", "png", "gif", "bmp", "svg", "webp"].includes(extension)) {
        return "Image";
      } else if (["mp4", "mkv", "avi", "mov", "wmv", "flv", "webm"].includes(extension)) {
        return "Video";
      } else if (["mp3", "wav", "ogg", "flac", "aac", "m4a"].includes(extension)) {
        return "Audio";
      } else if (["doc", "docx", "xls", "xlsx", "ppt", "pptx", "pdf", "txt", "csv"].includes(extension)) {
        return "Document";
      } else if (["zip", "rar", "7z", "tar", "gz", "bz2"].includes(extension)) {
        return "Archive";
      } else if (["exe", "msi", "dmg", "pkg", "deb", "rpm"].includes(extension)) {
        return "Executable";
      } else if (["js", "html", "css", "php", "py", "java", "cs", "rb", "go", "rs", "ts"].includes(extension)) {
        return "Code";
      } else if (["bat", "cmd", "sh", "ps1", "vbs", "jar"].includes(extension)) {
        return "Script";
      } else if (["dll", "so", "dylib"].includes(extension)) {
        return "Library";
      } else {
        return "Unknown";
      }
    };
    
    const isDangerousFileType = (): boolean => {
      const fileType = getFileType();
      return ["Executable", "Script", "Library"].includes(fileType) || file.type.includes("application/x-msdownload");
    };
    
    // Calculate likelihood of being malicious
    let isMaliciousChance = 0;
    
    // Increase chance based on file type
    if (isDangerousFileType()) {
      isMaliciousChance += 60; // Executables are higher risk
    }
    
    // Increase chance based on filename
    if (hasSuspiciousName()) {
      isMaliciousChance += 30;
    }
    
    // Random component
    isMaliciousChance += Math.random() * 20; 
    
    // Cap probability at 100%
    isMaliciousChance = Math.min(isMaliciousChance, 100);
    
    // Determine if file is "malicious" for the mock scan
    const isMalicious = Math.random() * 100 < isMaliciousChance;
    
    // For demo purposes, certain extensions will always be detected as malicious or clean
    const extension = file.name.split('.').pop()?.toLowerCase() || "";
    const alwaysMalicious = ["exe", "bat", "vbs"].includes(extension) && hasSuspiciousName();
    const alwaysClean = ["jpg", "png", "pdf"].includes(extension) && !hasSuspiciousName();
    
    const finalIsMalicious = alwaysMalicious || (isMalicious && !alwaysClean);
    
    // Threat types based on file type if malicious
    const possibleThreats = [
      {
        type: "Trojan",
        severity: "critical",
        details: "This file exhibits behavior consistent with a trojan horse, which may steal sensitive data or provide unauthorized system access.",
        indicators: ["Suspicious code patterns", "Unusual system API calls", "Hidden payloads"]
      },
      {
        type: "Ransomware",
        severity: "critical",
        details: "This file contains code patterns associated with ransomware, which could encrypt your files and demand payment.",
        indicators: ["Encryption functions", "System modification attempts", "Persistence mechanisms"]
      },
      {
        type: "Adware",
        severity: "medium",
        details: "This file may display unwanted advertisements or redirect web browsing activity.",
        indicators: ["Browser modifications", "Tracking capabilities", "Ad injection components"]
      },
      {
        type: "Spyware",
        severity: "high",
        details: "This file contains functionality to monitor user activity and collect sensitive information.",
        indicators: ["Keylogging capabilities", "Screenshot functionality", "Data exfiltration code"]
      },
      {
        type: "Potentially Unwanted Program",
        severity: "low",
        details: "This file contains software that may not be malicious but is generally unwanted due to adverse effects on system performance or user privacy.",
        indicators: ["Bundled software installers", "Browser extensions", "System modifications"]
      }
    ];
    
    // Select a threat type if malicious
    const threatDetails = finalIsMalicious
      ? possibleThreats[Math.floor(Math.random() * possibleThreats.length)]
      : null;
    
    return {
      fileName: file.name,
      fileSize: formatFileSize(file.size),
      fileType: getFileType(),
      threats: {
        found: finalIsMalicious,
        ...(threatDetails && {
          type: threatDetails.type,
          severity: threatDetails.severity as "critical" | "high" | "medium" | "low",
          details: threatDetails.details,
          indicators: threatDetails.indicators
        })
      },
      analysisTime: `${(Math.random() * 2 + 0.5).toFixed(1)} seconds`,
      md5Hash: generateRandomHash(32),
      sha256Hash: generateRandomHash(64),
      timestamp: new Date().toISOString()
    };
  };
  
  const getFileIcon = (fileType: string) => {
    switch (fileType) {
      case "Image": return <Image className="h-10 w-10 text-blue-500" />;
      case "Video": return <Film className="h-10 w-10 text-purple-500" />;
      case "Audio": return <Music className="h-10 w-10 text-pink-500" />;
      case "Document": return <FileText className="h-10 w-10 text-yellow-500" />;
      case "Archive": return <Archive className="h-10 w-10 text-gray-500" />;
      case "Executable": return <FileType className="h-10 w-10 text-red-500" />;
      case "Code": return <File className="h-10 w-10 text-green-500" />;
      case "Script": return <FileType className="h-10 w-10 text-orange-500" />;
      case "Library": return <File className="h-10 w-10 text-indigo-500" />;
      default: return <File className="h-10 w-10 text-gray-500" />;
    }
  };
  
  const getSeverityColor = (severity?: string) => {
    switch (severity) {
      case "critical":
        return "text-red-500";
      case "high":
        return "text-orange-500";
      case "medium":
        return "text-yellow-500";
      case "low":
        return "text-green-500";
      default:
        return "text-gray-500";
    }
  };
  
  const getSeverityBgColor = (severity?: string) => {
    switch (severity) {
      case "critical":
        return "bg-red-100 dark:bg-red-900/20 text-red-800 dark:text-red-400";
      case "high":
        return "bg-orange-100 dark:bg-orange-900/20 text-orange-800 dark:text-orange-400";
      case "medium":
        return "bg-yellow-100 dark:bg-yellow-900/20 text-yellow-800 dark:text-yellow-400";
      case "low":
        return "bg-green-100 dark:bg-green-900/20 text-green-800 dark:text-green-400";
      default:
        return "bg-gray-100 dark:bg-gray-900/50 text-gray-800 dark:text-gray-400";
    }
  };

  return (
    <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-8">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="bg-gradient-to-r from-red-500 to-red-600 dark:from-red-600 dark:to-red-700 rounded-lg shadow-md p-6 text-white mb-8"
      >
        <h1 className="text-2xl font-bold flex items-center">
          <FileWarning className="mr-2 h-6 w-6" />
          Malware Detector
        </h1>
        <p className="mt-2">
          Scan files for malware, viruses, and other threats to ensure they're safe
        </p>
      </motion.div>

      {/* File Upload Section */}
      <div className="bg-white dark:bg-black shadow-md rounded-lg border border-gray-200 dark:border-yellow-900/20 overflow-hidden mb-8">
        <div className="p-6">
          <h2 className="text-lg font-semibold text-gray-900 dark:text-yellow-400 mb-4">
            Upload File for Analysis
          </h2>
          
          {/* Drag and drop zone */}
          <div 
            className={`border-2 border-dashed rounded-lg p-8 text-center ${
              isDragging 
                ? "border-red-400 bg-red-50 dark:bg-red-900/10" 
                : "border-gray-300 dark:border-yellow-900/20 hover:border-red-300 dark:hover:border-red-800"
            } transition-colors duration-200 cursor-pointer`}
            onDrop={handleDrop}
            onDragOver={handleDragOver}
            onDragLeave={handleDragLeave}
            onClick={triggerFileInput}
          >
            <input 
              type="file" 
              className="hidden" 
              onChange={handleFileInputChange} 
              ref={fileInputRef}
              disabled={isAnalyzing}
            />
            
            <Upload className="mx-auto h-12 w-12 text-gray-400 dark:text-yellow-400/50 mb-3" />
            
            <p className="text-sm text-gray-600 dark:text-yellow-400">
              <span className="font-medium">Click to upload</span> or drag and drop
            </p>
            <p className="text-xs text-gray-500 dark:text-yellow-400/70 mt-1">
              Any file up to 50MB for scanning (For demonstration purposes)
            </p>
          </div>
          
          {error && (
            <div className="mt-4 p-3 bg-red-50 dark:bg-red-900/10 text-red-600 dark:text-red-400 rounded-md text-sm">
              <div className="flex items-center">
                <AlertTriangle className="h-4 w-4 mr-2" />
                {error}
              </div>
            </div>
          )}
          
          {/* Selected file info */}
          {file && !isAnalyzing && !result && (
            <div className="mt-6 p-4 border border-gray-200 dark:border-yellow-900/20 rounded-lg">
              <div className="flex items-center">
                <File className="h-8 w-8 text-gray-400 dark:text-yellow-400/50 mr-3" />
                <div className="flex-1 min-w-0">
                  <h3 className="text-sm font-medium text-gray-900 dark:text-yellow-400 truncate">
                    {file.name}
                  </h3>
                  <p className="text-xs text-gray-500 dark:text-yellow-400/70">
                    {file.size < 1024 
                      ? `${file.size} bytes` 
                      : file.size < 1048576 
                        ? `${(file.size / 1024).toFixed(2)} KB` 
                        : `${(file.size / 1048576).toFixed(2)} MB`}
                  </p>
                </div>
                <Button 
                  onClick={(e) => {
                    e.stopPropagation();
                    startAnalysis();
                  }}
                  className="bg-red-600 hover:bg-red-700 dark:bg-red-600 dark:hover:bg-red-700 text-white"
                >
                  Scan File
                </Button>
              </div>
            </div>
          )}
          
          {/* Analysis progress */}
          {isAnalyzing && (
            <div className="mt-6">
              <div className="flex justify-between text-sm font-medium text-gray-700 dark:text-yellow-400">
                <span>Analyzing file...</span>
                <span>{Math.round(analysisProgress)}%</span>
              </div>
              <div className="mt-2 w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5">
                <div 
                  className="bg-red-600 dark:bg-red-500 h-2.5 rounded-full transition-all duration-300 ease-in-out" 
                  style={{ width: `${analysisProgress}%` }}
                ></div>
              </div>
              <div className="mt-2 text-sm text-gray-500 dark:text-gray-400 animate-pulse">
                Deep scanning file structure...
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Scan Results */}
      {result && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.5 }}
          className="bg-white dark:bg-black shadow-md rounded-lg border border-gray-200 dark:border-yellow-900/20 overflow-hidden"
        >
          {/* Result Header */}
          <div className={`px-6 py-4 flex items-center justify-between ${
            !result.threats.found 
              ? "bg-green-50 dark:bg-green-900/20" 
              : "bg-red-50 dark:bg-red-900/20"
          }`}>
            <div className="flex items-center">
              {!result.threats.found ? (
                <Shield className="h-8 w-8 text-green-500 dark:text-green-400 mr-3" />
              ) : (
                <AlertTriangle className="h-8 w-8 text-red-500 dark:text-red-400 mr-3" />
              )}
              <div>
                <h2 className={`text-lg font-semibold ${
                  !result.threats.found 
                    ? "text-green-800 dark:text-green-400" 
                    : "text-red-800 dark:text-red-400"
                }`}>
                  {!result.threats.found ? "File is Safe" : "Threats Detected"}
                </h2>
                <p className="text-sm text-gray-600 dark:text-yellow-400/70">
                  {!result.threats.found 
                    ? "No malware or threats were found in this file" 
                    : `${result.threats.type} detected with ${result.threats.severity} severity`
                  }
                </p>
              </div>
            </div>

            {result.threats.found && result.threats.severity && (
              <div className={`px-3 py-1 rounded-full text-sm font-medium ${getSeverityBgColor(result.threats.severity)}`}>
                {result.threats.severity.charAt(0).toUpperCase() + result.threats.severity.slice(1)} Risk
              </div>
            )}
          </div>

          {/* File Details */}
          <div className="p-6">
            <div className="mb-6">
              <h3 className="text-lg font-medium text-gray-900 dark:text-yellow-400 mb-4">File Information</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="bg-gray-50 dark:bg-gray-900/50 p-4 rounded-lg">
                  <div className="flex items-start">
                    {getFileIcon(result.fileType)}
                    <div className="ml-4 flex-1">
                      <h4 className="font-medium text-gray-900 dark:text-yellow-400 mb-1">
                        {result.fileName}
                      </h4>
                      <p className="text-sm text-gray-600 dark:text-yellow-400/70">
                        Type: {result.fileType}
                      </p>
                      <p className="text-sm text-gray-600 dark:text-yellow-400/70">
                        Size: {result.fileSize}
                      </p>
                      <p className="text-sm text-gray-600 dark:text-yellow-400/70">
                        Analyzed: {new Date(result.timestamp).toLocaleString()}
                      </p>
                    </div>
                  </div>
                </div>

                <div className="bg-gray-50 dark:bg-gray-900/50 p-4 rounded-lg">
                  <h4 className="font-medium text-gray-900 dark:text-yellow-400 mb-2">
                    File Hashes
                  </h4>
                  <div className="space-y-2">
                    <div>
                      <p className="text-xs text-gray-500 dark:text-yellow-400/70">MD5:</p>
                      <p className="text-sm font-mono text-gray-600 dark:text-yellow-400/90 break-all">
                        {result.md5Hash}
                      </p>
                    </div>
                    <div>
                      <p className="text-xs text-gray-500 dark:text-yellow-400/70">SHA-256:</p>
                      <p className="text-sm font-mono text-gray-600 dark:text-yellow-400/90 break-all">
                        {result.sha256Hash}
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Threat Details */}
            {result.threats.found && (
              <div className="border-t border-gray-200 dark:border-yellow-900/20 pt-6">
                <h3 className="text-lg font-medium text-gray-900 dark:text-yellow-400 mb-4">Threat Details</h3>
                <div className="bg-red-50 dark:bg-red-900/10 border border-red-200 dark:border-red-900/30 rounded-lg p-4 mb-4">
                  <h4 className={`text-md font-medium ${getSeverityColor(result.threats.severity)} mb-2`}>
                    {result.threats.type}
                  </h4>
                  <p className="text-sm text-gray-600 dark:text-yellow-400/70 mb-3">
                    {result.threats.details}
                  </p>
                  
                  {result.threats.indicators && result.threats.indicators.length > 0 && (
                    <div>
                      <h5 className="text-sm font-medium text-gray-700 dark:text-yellow-400/90 mb-1">
                        Detected Indicators:
                      </h5>
                      <ul className="list-disc list-inside text-sm text-gray-600 dark:text-yellow-400/70 space-y-1">
                        {result.threats.indicators.map((indicator, idx) => (
                          <li key={idx}>{indicator}</li>
                        ))}
                      </ul>
                    </div>
                  )}
                </div>
                
                <div className="bg-yellow-50 dark:bg-yellow-900/10 border border-yellow-200 dark:border-yellow-900/30 rounded-lg p-4">
                  <h4 className="text-md font-medium text-yellow-800 dark:text-yellow-400 mb-2">
                    Recommended Actions
                  </h4>
                  <ul className="list-disc list-inside text-sm text-gray-600 dark:text-yellow-400/70 space-y-1">
                    <li>Do not open or execute this file</li>
                    <li>Delete the file or quarantine it using your antivirus software</li>
                    <li>Scan your system with a comprehensive antivirus solution</li>
                    <li>If you received this file by email, report it as a phishing attempt</li>
                    <li>Update your security software to the latest version</li>
                  </ul>
                </div>
              </div>
            )}

            {/* Safe File */}
            {!result.threats.found && (
              <div className="border-t border-gray-200 dark:border-yellow-900/20 pt-6">
                <div className="bg-green-50 dark:bg-green-900/10 border border-green-200 dark:border-green-900/30 rounded-lg p-4">
                  <h4 className="text-md font-medium text-green-800 dark:text-green-400 mb-2">
                    File Analysis Complete
                  </h4>
                  <p className="text-sm text-gray-600 dark:text-yellow-400/70 mb-3">
                    No malware or suspicious content was found in this file. It appears to be safe.
                  </p>
                  <div className="flex items-start">
                    <CheckCircle className="h-5 w-5 text-green-500 mr-2 mt-0.5" />
                    <p className="text-sm text-gray-600 dark:text-yellow-400/70">
                      Our scan did not detect any known malware signatures, suspicious behavior, or potentially harmful content.
                    </p>
                  </div>
                </div>
              </div>
            )}
            
            {/* Actions */}
            <div className="border-t border-gray-200 dark:border-yellow-900/20 pt-6 mt-6">
              <h3 className="text-lg font-medium text-gray-900 dark:text-yellow-400 mb-4">Actions</h3>
              <div className="flex flex-wrap gap-3">
                <Button 
                  onClick={() => {
                    setFile(null);
                    setResult(null);
                  }}
                  variant="outline"
                  className="bg-white dark:bg-black text-gray-700 dark:text-yellow-400 border border-gray-300 dark:border-yellow-900/20 hover:bg-gray-50 dark:hover:bg-yellow-900/10"
                >
                  <Upload className="mr-2 h-4 w-4" />
                  Scan Another File
                </Button>
                
                <Button 
                  variant="outline"
                  className="bg-white dark:bg-black text-gray-700 dark:text-yellow-400 border border-gray-300 dark:border-yellow-900/20 hover:bg-gray-50 dark:hover:bg-yellow-900/10"
                >
                  <Download className="mr-2 h-4 w-4" />
                  Download Report
                </Button>
                
                {result.threats.found && (
                  <Button 
                    className="bg-red-600 hover:bg-red-700 dark:bg-red-600 dark:hover:bg-red-700 text-white"
                  >
                    <Trash2 className="mr-2 h-4 w-4" />
                    Delete File
                  </Button>
                )}
              </div>
            </div>
          </div>
        </motion.div>
      )}
    </div>
  );
} 