"use client";

import { useState } from "react";
import { Search, AlertTriangle, Shield, CheckCircle, ExternalLink, Copy } from "lucide-react";
import { motion } from "framer-motion";
import { Button } from "@/app/components/ui/button";

interface Vulnerability {
  id: string;
  name: string;
  severity: "critical" | "high" | "medium" | "low";
  description: string;
  recommendation: string;
  references: string[];
}

interface ScanResult {
  url: string;
  timestamp: string;
  vulnerabilities: Vulnerability[];
  scanDuration: string;
  riskScore: number;
}

export default function VulnerabilityScanner() {
  const [url, setUrl] = useState("");
  const [scanning, setScanning] = useState(false);
  const [scanCompleted, setScanCompleted] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [scanResult, setScanResult] = useState<ScanResult | null>(null);
  const [error, setError] = useState("");

  const startScan = async () => {
    // Validate URL
    if (!url) {
      setError("Please enter a URL to scan");
      return;
    }

    try {
      // Clear previous results
      setError("");
      setScanCompleted(false);
      setScanResult(null);
      
      // Start scanning
      setScanning(true);
      setScanProgress(0);

      // Simulate scanning progress
      const interval = setInterval(() => {
        setScanProgress((prev) => {
          const newProgress = prev + Math.random() * 10;
          return newProgress >= 100 ? 100 : newProgress;
        });
      }, 500);

      // Simulate network request delay
      await new Promise((resolve) => setTimeout(resolve, 5000));

      // Generate mock scan results after 5 seconds
      clearInterval(interval);
      setScanProgress(100);
      
      // Generate mock vulnerabilities based on URL
      const mockResult = generateMockScanResult(url);
      setScanResult(mockResult);
      setScanCompleted(true);
      setScanning(false);
    } catch (err) {
      setError("An error occurred during scanning. Please try again.");
      setScanning(false);
    }
  };

  const generateMockScanResult = (url: string): ScanResult => {
    // AI-based mock data generation
    const timestamp = new Date().toISOString();
    
    // Generate between 0-5 vulnerabilities
    const numVulnerabilities = Math.floor(Math.random() * 6);
    
    // List of possible vulnerabilities
    const possibleVulnerabilities: Vulnerability[] = [
      {
        id: "XSS-001",
        name: "Cross-Site Scripting (XSS)",
        severity: "high",
        description: "Input fields on the site do not properly sanitize user input, allowing potential injection of malicious scripts.",
        recommendation: "Implement proper input validation and output encoding. Consider using a Content Security Policy (CSP).",
        references: ["https://owasp.org/www-community/attacks/xss/"]
      },
      {
        id: "SQL-001",
        name: "SQL Injection",
        severity: "critical",
        description: "The application may be vulnerable to SQL injection attacks through user-supplied input in search forms.",
        recommendation: "Use parameterized queries or prepared statements. Never concatenate user input directly into SQL queries.",
        references: ["https://owasp.org/www-community/attacks/SQL_Injection"]
      },
      {
        id: "CSRF-001",
        name: "Cross-Site Request Forgery",
        severity: "medium",
        description: "The application lacks proper CSRF tokens, allowing attackers to trick users into performing unwanted actions.",
        recommendation: "Implement anti-CSRF tokens for all state-changing operations.",
        references: ["https://owasp.org/www-community/attacks/csrf"]
      },
      {
        id: "TLS-001",
        name: "Insecure TLS Configuration",
        severity: "medium",
        description: "The site uses outdated TLS protocols or cipher suites that are considered insecure.",
        recommendation: "Update server configuration to use only TLS 1.2+ and modern cipher suites.",
        references: ["https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Security_Cheat_Sheet.html"]
      },
      {
        id: "HSTS-001",
        name: "Missing HTTP Strict Transport Security",
        severity: "low",
        description: "The site doesn't implement HSTS, potentially allowing downgrade attacks.",
        recommendation: "Implement HSTS with a long max-age directive and includeSubDomains option.",
        references: ["https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html"]
      },
      {
        id: "COOKIE-001",
        name: "Insecure Cookie Attributes",
        severity: "medium",
        description: "Cookies are set without the Secure and HttpOnly flags, exposing them to potential theft.",
        recommendation: "Set Secure and HttpOnly flags on all sensitive cookies.",
        references: ["https://owasp.org/www-community/controls/SecureFlag"]
      },
      {
        id: "OUTDATED-001",
        name: "Outdated Software Components",
        severity: "high",
        description: "The application appears to use outdated libraries or frameworks with known vulnerabilities.",
        recommendation: "Update all dependencies to their latest secure versions. Implement a dependency management strategy.",
        references: ["https://owasp.org/www-project-top-ten/2017/A9_2017-Using_Components_with_Known_Vulnerabilities"]
      }
    ];
    
    // Randomly select vulnerabilities
    const selectedVulnerabilities: Vulnerability[] = [];
    const availableVulnerabilities = [...possibleVulnerabilities];
    
    for (let i = 0; i < numVulnerabilities; i++) {
      if (availableVulnerabilities.length === 0) break;
      
      const randomIndex = Math.floor(Math.random() * availableVulnerabilities.length);
      selectedVulnerabilities.push(availableVulnerabilities[randomIndex]);
      availableVulnerabilities.splice(randomIndex, 1);
    }
    
    // Calculate risk score based on vulnerabilities
    const severityScores = {
      critical: 10,
      high: 7,
      medium: 4,
      low: 1
    };
    
    let riskScore = 100;
    for (const vuln of selectedVulnerabilities) {
      riskScore -= severityScores[vuln.severity];
    }
    
    // Ensure score doesn't go below 0
    riskScore = Math.max(0, riskScore);
    
    return {
      url,
      timestamp,
      vulnerabilities: selectedVulnerabilities,
      scanDuration: `${(Math.random() * 10 + 2).toFixed(2)} seconds`,
      riskScore
    };
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical":
        return "text-red-500 bg-red-100 dark:bg-red-900/20 dark:text-red-400";
      case "high":
        return "text-orange-500 bg-orange-100 dark:bg-orange-900/20 dark:text-orange-400";
      case "medium":
        return "text-yellow-500 bg-yellow-100 dark:bg-yellow-900/20 dark:text-yellow-400";
      case "low":
        return "text-green-500 bg-green-100 dark:bg-green-900/20 dark:text-green-400";
      default:
        return "text-blue-500 bg-blue-100 dark:bg-blue-900/20 dark:text-blue-400";
    }
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    // In a real app, you'd show a toast notification here
  };

  return (
    <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-8">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="bg-gradient-to-r from-blue-500 to-blue-600 dark:from-blue-600 dark:to-blue-700 rounded-lg shadow-md p-6 text-white mb-8"
      >
        <h1 className="text-2xl font-bold flex items-center">
          <Search className="mr-2 h-6 w-6" />
          Vulnerability Scanner
        </h1>
        <p className="mt-2">
          Scan your web applications for common security vulnerabilities and weaknesses
        </p>
      </motion.div>

      {/* Scanner Input */}
      <div className="bg-white dark:bg-black shadow-md rounded-lg border border-gray-200 dark:border-yellow-900/20 overflow-hidden mb-8">
        <div className="p-6">
          <div className="mb-6">
            <label htmlFor="url" className="block text-sm font-medium text-gray-700 dark:text-yellow-400 mb-2">
              Website URL to Scan
            </label>
            <div className="flex">
              <input
                type="text"
                id="url"
                placeholder="https://example.com"
                className="flex-1 bg-gray-50 dark:bg-gray-900 border border-gray-300 dark:border-yellow-900/20 rounded-l-md py-2 px-3 text-gray-900 dark:text-yellow-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                value={url}
                onChange={(e) => setUrl(e.target.value)}
                disabled={scanning}
              />
              <Button
                onClick={startScan}
                disabled={scanning || !url}
                className="bg-blue-600 hover:bg-blue-700 dark:bg-blue-600 dark:hover:bg-blue-700 text-white rounded-r-md"
              >
                {scanning ? "Scanning..." : "Start Scan"}
              </Button>
            </div>
            {error && (
              <p className="mt-2 text-sm text-red-600 dark:text-red-400">{error}</p>
            )}
          </div>

          {scanning && (
            <div className="mt-4">
              <div className="flex justify-between text-sm font-medium text-gray-700 dark:text-yellow-400">
                <span>Scanning...</span>
                <span>{Math.round(scanProgress)}%</span>
              </div>
              <div className="mt-2 w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5">
                <div 
                  className="bg-blue-600 dark:bg-blue-500 h-2.5 rounded-full transition-all duration-300 ease-in-out" 
                  style={{ width: `${scanProgress}%` }}
                ></div>
              </div>
              <div className="mt-2 text-sm text-gray-500 dark:text-gray-400 animate-pulse">
                Analyzing website structure...
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Scan Results */}
      {scanCompleted && scanResult && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.5 }}
          className="bg-white dark:bg-black shadow-md rounded-lg border border-gray-200 dark:border-yellow-900/20 overflow-hidden mb-8"
        >
          <div className="px-6 py-4 border-b border-gray-200 dark:border-yellow-900/20 flex justify-between items-center">
            <h2 className="text-lg font-semibold text-gray-900 dark:text-yellow-400">
              Scan Results
            </h2>
            <div className="flex space-x-2 text-sm">
              <span className="text-gray-500 dark:text-yellow-400/70">
                Scan completed in {scanResult.scanDuration}
              </span>
              <span className="text-gray-500 dark:text-yellow-400/70">|</span>
              <span className="text-gray-500 dark:text-yellow-400/70">
                {new Date(scanResult.timestamp).toLocaleString()}
              </span>
            </div>
          </div>

          <div className="p-6">
            <div className="flex items-center justify-between mb-6 bg-gray-50 dark:bg-gray-900/50 p-4 rounded-lg">
              <div>
                <h3 className="text-lg font-semibold text-gray-900 dark:text-yellow-400">
                  {scanResult.url}
                </h3>
                <p className="text-sm text-gray-500 dark:text-yellow-400/70">
                  {scanResult.vulnerabilities.length} vulnerabilities found
                </p>
              </div>
              <div className="text-center">
                <div className={`text-2xl font-bold ${
                  scanResult.riskScore >= 90 ? 'text-green-500' :
                  scanResult.riskScore >= 70 ? 'text-yellow-500' :
                  scanResult.riskScore >= 40 ? 'text-orange-500' :
                  'text-red-500'
                }`}>
                  {scanResult.riskScore}%
                </div>
                <div className="text-sm text-gray-500 dark:text-yellow-400/70">Security Score</div>
              </div>
            </div>

            {scanResult.vulnerabilities.length === 0 ? (
              <div className="text-center py-6">
                <CheckCircle className="h-12 w-12 text-green-500 mx-auto mb-4" />
                <h3 className="text-lg font-semibold text-gray-900 dark:text-yellow-400 mb-2">
                  No Vulnerabilities Found
                </h3>
                <p className="text-gray-500 dark:text-yellow-400/70">
                  Great job! Your website passed all our security checks.
                </p>
              </div>
            ) : (
              <div className="space-y-4">
                <h3 className="text-lg font-semibold text-gray-900 dark:text-yellow-400 mb-2">
                  Vulnerabilities
                </h3>
                
                {scanResult.vulnerabilities.map((vulnerability) => (
                  <div 
                    key={vulnerability.id}
                    className="border border-gray-200 dark:border-yellow-900/20 rounded-lg overflow-hidden"
                  >
                    <div className="flex items-center justify-between px-4 py-3 bg-gray-50 dark:bg-gray-900/50">
                      <div className="flex items-center">
                        <AlertTriangle className="h-5 w-5 text-orange-500 mr-2" />
                        <h4 className="font-medium text-gray-900 dark:text-yellow-400">
                          {vulnerability.name}
                        </h4>
                      </div>
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${getSeverityColor(vulnerability.severity)}`}>
                        {vulnerability.severity.charAt(0).toUpperCase() + vulnerability.severity.slice(1)}
                      </span>
                    </div>
                    <div className="p-4">
                      <div className="mb-3">
                        <h5 className="text-sm font-medium text-gray-700 dark:text-yellow-400/90 mb-1">
                          Description
                        </h5>
                        <p className="text-sm text-gray-600 dark:text-yellow-400/70">
                          {vulnerability.description}
                        </p>
                      </div>
                      <div className="mb-3">
                        <h5 className="text-sm font-medium text-gray-700 dark:text-yellow-400/90 mb-1">
                          Recommendation
                        </h5>
                        <p className="text-sm text-gray-600 dark:text-yellow-400/70">
                          {vulnerability.recommendation}
                        </p>
                      </div>
                      {vulnerability.references.length > 0 && (
                        <div>
                          <h5 className="text-sm font-medium text-gray-700 dark:text-yellow-400/90 mb-1">
                            References
                          </h5>
                          <ul className="list-disc list-inside text-sm text-gray-600 dark:text-yellow-400/70">
                            {vulnerability.references.map((ref, idx) => (
                              <li key={idx} className="flex items-center">
                                <a 
                                  href={ref} 
                                  target="_blank" 
                                  rel="noreferrer" 
                                  className="text-blue-600 dark:text-blue-400 hover:underline flex items-center"
                                >
                                  {ref.replace(/^https?:\/\//, '').split('/')[0]}
                                  <ExternalLink className="ml-1 h-3 w-3" />
                                </a>
                                <button
                                  onClick={() => copyToClipboard(ref)}
                                  className="ml-2 text-gray-400 hover:text-gray-600 dark:text-yellow-400/50 dark:hover:text-yellow-400"
                                >
                                  <Copy className="h-3 w-3" />
                                </button>
                              </li>
                            ))}
                          </ul>
                        </div>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </motion.div>
      )}

      {/* AI-powered Recommendations */}
      {scanCompleted && scanResult && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.5, delay: 0.2 }}
          className="bg-white dark:bg-black shadow-md rounded-lg border border-gray-200 dark:border-yellow-900/20 overflow-hidden"
        >
          <div className="px-6 py-4 border-b border-gray-200 dark:border-yellow-900/20">
            <h2 className="text-lg font-semibold text-gray-900 dark:text-yellow-400 flex items-center">
              <Shield className="h-5 w-5 mr-2" />
              AI Security Recommendations
            </h2>
          </div>
          <div className="p-6">
            {scanResult.vulnerabilities.length === 0 ? (
              <div className="text-gray-600 dark:text-yellow-400/70">
                <p>Your website shows good security practices. To maintain your strong security posture:</p>
                <ul className="list-disc list-inside mt-2 space-y-1">
                  <li>Regularly update all software components and dependencies</li>
                  <li>Implement Content Security Policy (CSP) headers</li>
                  <li>Consider setting up regular automated security scanning</li>
                  <li>Implement a Web Application Firewall (WAF) for additional protection</li>
                </ul>
              </div>
            ) : (
              <div className="text-gray-600 dark:text-yellow-400/70">
                <p>Based on the scan results, here are personalized security recommendations:</p>
                <ul className="list-disc list-inside mt-2 space-y-1">
                  {scanResult.vulnerabilities.some(v => v.severity === "critical" || v.severity === "high") && (
                    <li className="text-red-600 dark:text-red-400 font-medium">
                      Address high and critical vulnerabilities immediately
                    </li>
                  )}
                  {scanResult.vulnerabilities.some(v => v.id === "XSS-001") && (
                    <li>Implement proper input validation and output encoding on all user inputs</li>
                  )}
                  {scanResult.vulnerabilities.some(v => v.id === "SQL-001") && (
                    <li>Switch to parameterized queries or an ORM for all database operations</li>
                  )}
                  {scanResult.vulnerabilities.some(v => v.id === "TLS-001" || v.id === "HSTS-001") && (
                    <li>Upgrade TLS configuration and implement proper security headers</li>
                  )}
                  {scanResult.vulnerabilities.some(v => v.id === "OUTDATED-001") && (
                    <li>Establish a regular dependency update process with security reviews</li>
                  )}
                  {scanResult.vulnerabilities.some(v => v.id === "COOKIE-001") && (
                    <li>Review and update cookie security attributes across the application</li>
                  )}
                  <li>Set up regular security scanning as part of your deployment process</li>
                  <li>Consider a security audit by a professional security team</li>
                </ul>
              </div>
            )}
          </div>
        </motion.div>
      )}
    </div>
  );
} 